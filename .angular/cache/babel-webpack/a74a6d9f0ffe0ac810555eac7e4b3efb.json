{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Kevin\\\\Documents\\\\Bachelor-Thesis-Research\\\\Chatbot-Frontend\\\\chatbot\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { timer } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../controller/api-controller.service\";\nimport * as i2 from \"@nebular/theme\";\nimport * as i3 from \"@angular/common\";\n\nfunction ChatbotComponent_nb_chat_message_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nb-chat-message\", 4);\n  }\n\n  if (rf & 2) {\n    const msg_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"message\", msg_r2.text)(\"reply\", msg_r2.reply)(\"sender\", msg_r2.sender)(\"avatar\", msg_r2.avatar);\n  }\n}\n\nfunction ChatbotComponent_nb_chat_message_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nb-chat-message\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nbSpinner\", ctx_r1.loading);\n  }\n}\n\nexport let ChatbotComponent = /*#__PURE__*/(() => {\n  class ChatbotComponent {\n    constructor(service) {\n      this.service = service;\n      this.messages = [];\n      this.loading = false;\n      this.startEvent = [{\n        name: 'greeting',\n        payload: {\n          eventCategory: 'test',\n          eventAction: 'test',\n          source: 'test'\n        },\n        tpKey: 'de',\n        scope: 'event'\n      }];\n    }\n\n    ngOnInit() {\n      this.sendEvent(this.startEvent);\n    }\n\n    handleUserMessage(event) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        console.log('handleUserMessage', event);\n        const text = event.message;\n        let textEvent = [{\n          payload: {\n            eventCategory: 'test',\n            eventAction: 'test',\n            source: 'test'\n          },\n          tpKey: 'de',\n          scope: 'event',\n          text: text\n        }];\n\n        _this.addUserMessage(text);\n\n        _this.loading = true;\n        yield timer(1000).pipe(take(1)).toPromise();\n\n        _this.sendEvent(textEvent);\n\n        _this.loading = false;\n      })();\n    }\n\n    addUserMessage(text) {\n      this.messages.push({\n        text,\n        sender: 'Du',\n        reply: true,\n        date: new Date()\n      });\n    }\n\n    addBotMessage(text) {\n      this.messages.push({\n        text,\n        sender: 'BAICA',\n        avatar: '/assets/chatbot.jpeg',\n        date: new Date()\n      });\n    }\n\n    sendEvent(events) {\n      this.service.find(events, '/action').subscribe(event => {\n        console.log('bricks from event api', event);\n        let limit = 0;\n        event.forEach(e => {\n          this.eventResponse = e.content.data.title;\n          this.addBotMessage(this.eventResponse);\n          this.loading = false;\n        });\n\n        if (event.length === 0 && limit < 3) {\n          limit += 1;\n          this.sendEvent(events); // this.addBotMessage(\n          //   'Huch scheint so als hätte ich kurz die Verbindung verloren, können Sie das bitte nochmals wiederholen?'\n          // );\n        }\n      });\n    }\n\n  }\n\n  ChatbotComponent.ɵfac = function ChatbotComponent_Factory(t) {\n    return new (t || ChatbotComponent)(i0.ɵɵdirectiveInject(i1.ApiControllerService));\n  };\n\n  ChatbotComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatbotComponent,\n    selectors: [[\"app-chatbot\"]],\n    decls: 4,\n    vars: 2,\n    consts: [[\"title\", \"Conversation with a Chatbot\"], [\"type\", \"text\", 3, \"message\", \"reply\", \"sender\", \"avatar\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"test\", \"nbSpinnerStatus\", \"info\", \"type\", \"text\", \"message\", \"schreibt...\", 3, \"nbSpinner\", 4, \"ngIf\"], [3, \"send\"], [\"type\", \"text\", 3, \"message\", \"reply\", \"sender\", \"avatar\"], [\"nbSpinnerStatus\", \"info\", \"type\", \"text\", \"message\", \"schreibt...\", 1, \"test\", 3, \"nbSpinner\"]],\n    template: function ChatbotComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"nb-chat\", 0);\n        i0.ɵɵtemplate(1, ChatbotComponent_nb_chat_message_1_Template, 1, 4, \"nb-chat-message\", 1);\n        i0.ɵɵtemplate(2, ChatbotComponent_nb_chat_message_2_Template, 1, 1, \"nb-chat-message\", 2);\n        i0.ɵɵelementStart(3, \"nb-chat-form\", 3);\n        i0.ɵɵlistener(\"send\", function ChatbotComponent_Template_nb_chat_form_send_3_listener($event) {\n          return ctx.handleUserMessage($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    directives: [i2.NbChatComponent, i3.NgForOf, i3.NgIf, i2.NbChatFormComponent, i2.NbChatMessageComponent, i2.NbSpinnerDirective],\n    styles: [\"\"]\n  });\n  return ChatbotComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}